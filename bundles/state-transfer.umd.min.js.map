{"version":3,"file":"state-transfer.umd.min.js","sources":["../../../../.temp/packages/@ngx-universal/state-transfer/src/utils/json-string-tools.ts","../../../../.temp/packages/@ngx-universal/state-transfer/index.ts","../../../../.temp/packages/@ngx-universal/state-transfer/src/state-transfer.service.ts","../../../../.temp/packages/@ngx-universal/state-transfer/src/server-state-transfer.service.ts","../../../../.temp/packages/@ngx-universal/state-transfer/src/http-transfer.service.ts"],"sourcesContent":["const /** @type {?} */ jsonStringEscapeMap = {\r\n  '&': '&amp;',\r\n  '<': '&lt;',\r\n  '>': '&gt;',\r\n  '\\\\': '\\\\\\\\',\r\n  '\\'': '&#39;'\r\n};\r\n\r\nconst /** @type {?} */ jsonStringUnescapeMap = {\r\n  '&lt;': '<',\r\n  '&gt;': '>',\r\n  '&amp;': '&',\r\n  '&#39;': '\\''\r\n};\n/**\n * @param {?} str\n * @return {?}\n */\nexport function jsonStringEscape(str: string): string {\r\n  return str.replace(/[&\\<\\>\\\\']/g, e => jsonStringEscapeMap[e]);\r\n}\n/**\n * @param {?} str\n * @return {?}\n */\nexport function jsonStringUnescape(str: string): string {\r\n  return str.replace(/(&amp;)|(&lt;)|(&gt;)|(&#39;)/g, e => jsonStringUnescapeMap[e]);\r\n}\r\n","// angular\r\n\nimport { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\n\r\n// module\r\n\nimport { DEFAULT_STATE_ID, ServerStateTransferService, STATE_ID } from './src/server-state-transfer.service';\r\nimport { HttpTransferService } from './src/http-transfer.service';\r\nimport { StateTransferService } from './src/state-transfer.service';\r\n\r\nexport {STATE_ID,DEFAULT_STATE_ID,ServerStateTransferService} from './src/server-state-transfer.service';\r\nexport {StateTransferService} from './src/state-transfer.service';\r\nexport {HttpTransferService} from './src/http-transfer.service';\n/**\n * @param {?} stateId\n * @return {?}\n */\nexport function stateTransferFactory(stateId: string): StateTransferService {\r\n  const /** @type {?} */ stateTransfer = new StateTransferService();\r\n  stateTransfer.initialize(window[stateId] || {});\r\n\r\n  return stateTransfer;\r\n}\nexport class HttpTransferModule {\n/**\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: HttpTransferModule\r\n    };\r\n  }\n/**\n * @param {?} parentModule\n */\nconstructor(  parentModule: HttpTransferModule) {\r\n    if (parentModule)\r\n      throw new Error('HttpTransferModule already loaded; import in root module only.');\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  providers: [\r\n    HttpTransferService\r\n  ]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpTransferModule, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction HttpTransferModule_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpTransferModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpTransferModule.ctorParameters;\n}\n\nexport class BrowserStateTransferModule {\n/**\n * @param {?=} stateId\n * @return {?}\n */\nstatic forRoot(stateId: string = DEFAULT_STATE_ID): ModuleWithProviders {\r\n    return {\r\n      ngModule: BrowserStateTransferModule,\r\n      providers: [\r\n        {\r\n          provide: StateTransferService,\r\n          useFactory: (stateTransferFactory),\r\n          deps: [STATE_ID]\r\n        },\r\n        {\r\n          provide: STATE_ID,\r\n          useValue: stateId\r\n        }\r\n      ]\r\n    };\r\n  }\n/**\n * @param {?} parentModule\n */\nconstructor(  parentModule: BrowserStateTransferModule) {\r\n    if (parentModule)\r\n      throw new Error('BrowserStateTransferModule already loaded; import in BROWSER module only.');\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserStateTransferModule, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction BrowserStateTransferModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserStateTransferModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserStateTransferModule.ctorParameters;\n}\n\nexport class ServerStateTransferModule {\n/**\n * @param {?=} stateId\n * @return {?}\n */\nstatic forRoot(stateId: string = DEFAULT_STATE_ID): ModuleWithProviders {\r\n    return {\r\n      ngModule: ServerStateTransferModule,\r\n      providers: [\r\n        {\r\n          provide: STATE_ID,\r\n          useValue: stateId\r\n        }\r\n      ]\r\n    };\r\n  }\n/**\n * @param {?} parentModule\n */\nconstructor(  parentModule: ServerStateTransferModule) {\r\n    if (parentModule)\r\n      throw new Error('ServerStateTransferModule already loaded; import in SERVER module only.');\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  providers: [\r\n    {\r\n      provide: StateTransferService,\r\n      useClass: ServerStateTransferService\r\n    }\r\n  ]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ServerStateTransferModule, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction ServerStateTransferModule_tsickle_Closure_declarations() {\n/** @type {?} */\nServerStateTransferModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nServerStateTransferModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","// angular\r\n\nimport { Injectable } from '@angular/core';\nexport class StateTransferService {\nprivate readonly state: Map<string, any>;\nconstructor() {\r\n    this.state = new Map<string, any>();\r\n  }\n/**\n * @param {?} state\n * @return {?}\n */\ninitialize(state: Map<string, any>): void {\r\n    Object.keys(state)\r\n      .forEach(key => {\r\n        this.set(key, state[key]);\r\n      });\r\n  }\n/**\n * @param {?} key\n * @return {?}\n */\nget(key: string): any {\r\n    return this.state.get(key);\r\n  }\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nset(key: string, value: any): Map<string, any> {\r\n    return this.state.set(key, value);\r\n  }\n/**\n * @return {?}\n */\ninject(): void {\r\n    // NOTE: not implemented, needs to be overridden by subclasses\r\n  }\n/**\n * @return {?}\n */\nprotected toJson(): any {\r\n    const /** @type {?} */ obj = {};\r\n    Array.from(this.state.keys())\r\n      .forEach((key: string) => {\r\n        obj[key] = this.get(key);\r\n      });\r\n\r\n    return obj;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StateTransferService_tsickle_Closure_declarations() {\n/** @type {?} */\nStateTransferService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStateTransferService.ctorParameters;\n/** @type {?} */\nStateTransferService.prototype.state;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","// angular\r\n\nimport { Inject, Injectable, InjectionToken, RendererFactory2, ViewEncapsulation } from '@angular/core';\r\nimport { PlatformState } from '@angular/platform-server';\r\n\r\n// module\r\n\nimport { StateTransferService } from './state-transfer.service';\r\n\r\n// utils\r\n\nimport { jsonStringEscape } from './utils/json-string-tools';\r\n\r\nexport const /** @type {?} */ STATE_ID = new InjectionToken<string>('STATE_ID');\r\nexport const /** @type {?} */ DEFAULT_STATE_ID = 'STATE';\nexport class ServerStateTransferService extends StateTransferService {\n/**\n * @param {?} stateId\n * @param {?} platformState\n * @param {?} rendererFactory\n */\nconstructor(\nprivate readonly stateId: string,\nprivate readonly platformState: PlatformState,\nprivate readonly rendererFactory: RendererFactory2) {\r\n    super();\r\n  }\n/**\n * @return {?}\n */\ninject(): void {\r\n    try {\r\n      const /** @type {?} */ document: any = this.platformState.getDocument();\r\n      const /** @type {?} */ state = JSON.stringify(this.toJson());\r\n      const /** @type {?} */ escapedState = jsonStringEscape(state);\r\n      const /** @type {?} */ renderer = this.rendererFactory.createRenderer(document, {\r\n        id: '-1',\r\n        encapsulation: ViewEncapsulation.None,\r\n        styles: [],\r\n        data: {}\r\n      });\r\n\r\n      const /** @type {?} */ body = document.body;\r\n\r\n      if (!body)\r\n        throw new Error('<body> not found in the document');\r\n\r\n      const /** @type {?} */ script = renderer.createElement('script');\r\n      renderer.setValue(script, `window['${this.stateId}'] = '${escapedState}'`);\r\n      renderer.appendChild(body, script);\r\n    } catch ( /** @type {?} */e) {\r\n      console.error(e);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [STATE_ID, ] }, ]},\n{type: PlatformState, },\n{type: RendererFactory2, },\n];\n}\n\nfunction ServerStateTransferService_tsickle_Closure_declarations() {\n/** @type {?} */\nServerStateTransferService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nServerStateTransferService.ctorParameters;\n/** @type {?} */\nServerStateTransferService.prototype.stateId;\n/** @type {?} */\nServerStateTransferService.prototype.platformState;\n/** @type {?} */\nServerStateTransferService.prototype.rendererFactory;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","// angular\r\n\nimport { Injectable } from '@angular/core';\r\nimport { Http, Request, RequestOptionsArgs, Response } from '@angular/http';\r\n\r\n// libs\r\n\nimport { Observable } from 'rxjs/Observable';\r\nimport'rxjs/add/observable/fromPromise';\r\nimport'rxjs/add/operator/do';\r\nimport'rxjs/add/operator/map';\r\n\r\n// module\r\n\nimport { StateTransferService } from './state-transfer.service';\nexport class HttpTransferService {\n/**\n * @param {?} http\n * @param {?} stateTransfer\n */\nconstructor(private readonly http: Http,\r\n              protected readonly stateTransfer: StateTransferService) {\r\n  }\n/**\n * @param {?} uri\n * @param {?=} options\n * @return {?}\n */\nrequest(uri: string | Request, options?: RequestOptionsArgs): Observable<any> {\r\n    return this.getData(uri, options, (urlRes: string, optionsRes: RequestOptionsArgs) => {\r\n      return this.http.request(urlRes, optionsRes);\r\n    });\r\n  }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nget(url: string, options?: RequestOptionsArgs): Observable<any> {\r\n    return this.getData(url, options, (urlRes: string, optionsRes: RequestOptionsArgs) => {\r\n      return this.http.get(urlRes, optionsRes);\r\n    });\r\n  }\n/**\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npost(url: string, body: any, options?: RequestOptionsArgs): Observable<any> {\r\n    return this.getPostData(url, body, options, (urlRes: string) => {\r\n      return this.http.post(urlRes, body, options);\r\n    });\r\n  }\n/**\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\nput(url: string, body: any, options?: RequestOptionsArgs): Observable<any> {\r\n    return this.getData(url, options, (urlRes: string, optionsRes: RequestOptionsArgs) => {\r\n      return this.http.put(urlRes, optionsRes);\r\n    });\r\n  }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\ndelete(url: string, options?: RequestOptionsArgs): Observable<any> {\r\n    return this.getData(url, options, (urlRes: string, optionsRes: RequestOptionsArgs) => {\r\n      return this.http.delete(urlRes, optionsRes);\r\n    });\r\n  }\n/**\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npatch(url: string, body: any, options?: RequestOptionsArgs): Observable<any> {\r\n    return this.getPostData(url, body, options, (urlRes: string) => {\r\n      return this.http.patch(urlRes, body, options);\r\n    });\r\n  }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nhead(url: string, options?: RequestOptionsArgs): Observable<any> {\r\n    return this.getData(url, options, (urlRes: string, optionsRes: RequestOptionsArgs) => {\r\n      return this.http.head(urlRes, optionsRes);\r\n    });\r\n  }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\noptions(url: string, options?: RequestOptionsArgs): Observable<any> {\r\n    return this.getData(url, options, (urlRes: string, optionsRes: RequestOptionsArgs) => {\r\n      return this.http.options(urlRes, optionsRes);\r\n    });\r\n  }\n/**\n * @param {?} uri\n * @param {?} options\n * @param {?} callback\n * @return {?}\n */\nprivate getData(uri: string | Request, options: RequestOptionsArgs,\r\n                  callback: (uri: string | Request, options?: RequestOptionsArgs) => Observable<Response>): any {\r\n\r\n    let /** @type {?} */ url = uri;\r\n\r\n    if (typeof uri !== 'string')\r\n      url = uri.url;\r\n\r\n    const /** @type {?} */ key = url + JSON.stringify(options);\r\n\r\n    try {\r\n      return this.resolveData(key);\r\n\r\n    } catch ( /** @type {?} */e) {\r\n      return callback(uri, options)\r\n        .map(res => res.json())\r\n        .do(data => {\r\n          this.setCache(key, data);\r\n        });\r\n    }\r\n  }\n/**\n * @param {?} uri\n * @param {?} body\n * @param {?} options\n * @param {?} callback\n * @return {?}\n */\nprivate getPostData(uri: string | Request, body: any, options: RequestOptionsArgs,\r\n                      callback: (uri: string | Request, body: any, options?: RequestOptionsArgs) => Observable<Response>): any {\r\n\r\n    let /** @type {?} */ url = uri;\r\n\r\n    if (typeof uri !== 'string')\r\n      url = uri.url;\r\n\r\n    const /** @type {?} */ key = url + JSON.stringify(body) + JSON.stringify(options);\r\n\r\n    try {\r\n      return this.resolveData(key);\r\n    } catch ( /** @type {?} */e) {\r\n      return callback(uri, body, options)\r\n        .map(res => res.json())\r\n        .do(data => {\r\n          this.setCache(key, data);\r\n        });\r\n    }\r\n  }\n/**\n * @param {?} key\n * @return {?}\n */\nprivate resolveData(key: string): any {\r\n    const /** @type {?} */ data = this.getFromCache(key);\r\n\r\n    if (!data)\r\n      throw new Error();\r\n\r\n    return Observable.fromPromise(Promise.resolve(data));\r\n  }\n/**\n * @param {?} key\n * @param {?} data\n * @return {?}\n */\nprivate setCache(key: string, data: any): any {\r\n    return this.stateTransfer.set(key, data);\r\n  }\n/**\n * @param {?} key\n * @return {?}\n */\nprivate getFromCache(key: string): any {\r\n    return this.stateTransfer.get(key);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: StateTransferService, },\n];\n}\n\nfunction HttpTransferService_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpTransferService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpTransferService.ctorParameters;\n/** @type {?} */\nHttpTransferService.prototype.http;\n/** @type {?} */\nHttpTransferService.prototype.stateTransfer;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["str","replace","e","jsonStringEscapeMap","stateId","stateTransfer","StateTransferService","initialize","window","this","state","Map","Object","keys","forEach","key","_this","set","get","value","obj","Array","from","type","Injectable","&","<",">","\\","'","STATE_ID","InjectionToken","platformState","rendererFactory","_super","tslib_1.__extends","ServerStateTransferService","document_1","getDocument","escapedState","jsonStringEscape","JSON","stringify","toJson","renderer","createRenderer","id","encapsulation","ViewEncapsulation","None","styles","data","body","Error","script","createElement","setValue","appendChild","console","error","undefined","decorators","Inject","args","PlatformState","RendererFactory2","http","HttpTransferService","uri","options","getData","urlRes","optionsRes","request","url","getPostData","post","put","delete","patch","head","callback","resolveData","map","res","json","do","setCache","getFromCache","Observable","fromPromise","Promise","resolve","Http","parentModule","HttpTransferModule","ngModule","NgModule","providers","Optional","SkipSelf","BrowserStateTransferModule","provide","useFactory","deps","useValue","ServerStateTransferModule","useClass"],"mappings":"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"}