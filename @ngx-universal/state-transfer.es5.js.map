{"version":3,"file":"state-transfer.es5.js","sources":["../../../../.temp/packages/@ngx-universal/state-transfer/src/state-transfer.service.ts","../../../../.temp/packages/@ngx-universal/state-transfer/src/utils/json-string-tools.ts","../../../../.temp/packages/@ngx-universal/state-transfer/src/server-state-transfer.service.ts","../../../../.temp/packages/@ngx-universal/state-transfer/src/http-transfer.service.ts","../../../../.temp/packages/@ngx-universal/state-transfer/index.ts"],"sourcesContent":["// angular\r\n\nimport { Injectable } from '@angular/core';\nexport class StateTransferService {\nprivate readonly state: Map<string, any>;\nconstructor() {\r\n    this.state = new Map<string, any>();\r\n  }\n/**\n * @param {?} state\n * @return {?}\n */\ninitialize(state: Map<string, any>): void {\r\n    Object.keys(state)\r\n      .forEach(key => {\r\n        this.set(key, state[key]);\r\n      });\r\n  }\n/**\n * @param {?} key\n * @return {?}\n */\nget(key: string): any {\r\n    return this.state.get(key);\r\n  }\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nset(key: string, value: any): Map<string, any> {\r\n    return this.state.set(key, value);\r\n  }\n/**\n * @return {?}\n */\ninject(): void {\r\n    // NOTE: not implemented, needs to be overridden by subclasses\r\n  }\n/**\n * @return {?}\n */\nprotected toJson(): any {\r\n    const /** @type {?} */ obj = {};\r\n    Array.from(this.state.keys())\r\n      .forEach((key: string) => {\r\n        obj[key] = this.get(key);\r\n      });\r\n\r\n    return obj;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StateTransferService_tsickle_Closure_declarations() {\n/** @type {?} */\nStateTransferService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStateTransferService.ctorParameters;\n/** @type {?} */\nStateTransferService.prototype.state;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","const /** @type {?} */ jsonStringEscapeMap = {\r\n  '&': '&amp;',\r\n  '<': '&lt;',\r\n  '>': '&gt;',\r\n  '\\\\': '\\\\\\\\',\r\n  '\\'': '&#39;'\r\n};\r\n\r\nconst /** @type {?} */ jsonStringUnescapeMap = {\r\n  '&lt;': '<',\r\n  '&gt;': '>',\r\n  '&amp;': '&',\r\n  '&#39;': '\\''\r\n};\n/**\n * @param {?} str\n * @return {?}\n */\nexport function jsonStringEscape(str: string): string {\r\n  return str.replace(/[&\\<\\>\\\\']/g, e => jsonStringEscapeMap[e]);\r\n}\n/**\n * @param {?} str\n * @return {?}\n */\nexport function jsonStringUnescape(str: string): string {\r\n  return str.replace(/(&amp;)|(&lt;)|(&gt;)|(&#39;)/g, e => jsonStringUnescapeMap[e]);\r\n}\r\n","// angular\r\n\nimport { Inject, Injectable, InjectionToken, RendererFactory2, ViewEncapsulation } from '@angular/core';\r\nimport { PlatformState } from '@angular/platform-server';\r\n\r\n// module\r\n\nimport { StateTransferService } from './state-transfer.service';\r\n\r\n// utils\r\n\nimport { jsonStringEscape } from './utils/json-string-tools';\r\n\r\nexport const /** @type {?} */ STATE_ID = new InjectionToken<string>('STATE_ID');\r\nexport const /** @type {?} */ DEFAULT_STATE_ID = 'STATE';\nexport class ServerStateTransferService extends StateTransferService {\n/**\n * @param {?} stateId\n * @param {?} platformState\n * @param {?} rendererFactory\n */\nconstructor(\nprivate readonly stateId: string,\nprivate readonly platformState: PlatformState,\nprivate readonly rendererFactory: RendererFactory2) {\r\n    super();\r\n  }\n/**\n * @return {?}\n */\ninject(): void {\r\n    try {\r\n      const /** @type {?} */ document: any = this.platformState.getDocument();\r\n      const /** @type {?} */ state = JSON.stringify(this.toJson());\r\n      const /** @type {?} */ escapedState = jsonStringEscape(state);\r\n      const /** @type {?} */ renderer = this.rendererFactory.createRenderer(document, {\r\n        id: '-1',\r\n        encapsulation: ViewEncapsulation.None,\r\n        styles: [],\r\n        data: {}\r\n      });\r\n\r\n      const /** @type {?} */ body = document.body;\r\n\r\n      if (!body)\r\n        throw new Error('<body> not found in the document');\r\n\r\n      const /** @type {?} */ script = renderer.createElement('script');\r\n      renderer.setValue(script, `window['${this.stateId}'] = '${escapedState}'`);\r\n      renderer.appendChild(body, script);\r\n    } catch ( /** @type {?} */e) {\r\n      console.error(e);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [STATE_ID, ] }, ]},\n{type: PlatformState, },\n{type: RendererFactory2, },\n];\n}\n\nfunction ServerStateTransferService_tsickle_Closure_declarations() {\n/** @type {?} */\nServerStateTransferService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nServerStateTransferService.ctorParameters;\n/** @type {?} */\nServerStateTransferService.prototype.stateId;\n/** @type {?} */\nServerStateTransferService.prototype.platformState;\n/** @type {?} */\nServerStateTransferService.prototype.rendererFactory;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","// angular\r\n\nimport { Injectable } from '@angular/core';\r\nimport { Http, Request, RequestOptionsArgs, Response } from '@angular/http';\r\n\r\n// libs\r\n\nimport { Observable } from 'rxjs/Observable';\r\nimport'rxjs/add/observable/fromPromise';\r\nimport'rxjs/add/operator/do';\r\nimport'rxjs/add/operator/map';\r\n\r\n// module\r\n\nimport { StateTransferService } from './state-transfer.service';\nexport class HttpTransferService {\n/**\n * @param {?} http\n * @param {?} stateTransfer\n */\nconstructor(private readonly http: Http,\r\n              protected readonly stateTransfer: StateTransferService) {\r\n  }\n/**\n * @param {?} uri\n * @param {?=} options\n * @return {?}\n */\nrequest(uri: string | Request, options?: RequestOptionsArgs): Observable<any> {\r\n    return this.getData(uri, options, (urlRes: string, optionsRes: RequestOptionsArgs) => {\r\n      return this.http.request(urlRes, optionsRes);\r\n    });\r\n  }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nget(url: string, options?: RequestOptionsArgs): Observable<any> {\r\n    return this.getData(url, options, (urlRes: string, optionsRes: RequestOptionsArgs) => {\r\n      return this.http.get(urlRes, optionsRes);\r\n    });\r\n  }\n/**\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npost(url: string, body: any, options?: RequestOptionsArgs): Observable<any> {\r\n    return this.getPostData(url, body, options, (urlRes: string) => {\r\n      return this.http.post(urlRes, body, options);\r\n    });\r\n  }\n/**\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\nput(url: string, body: any, options?: RequestOptionsArgs): Observable<any> {\r\n    return this.getData(url, options, (urlRes: string, optionsRes: RequestOptionsArgs) => {\r\n      return this.http.put(urlRes, optionsRes);\r\n    });\r\n  }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\ndelete(url: string, options?: RequestOptionsArgs): Observable<any> {\r\n    return this.getData(url, options, (urlRes: string, optionsRes: RequestOptionsArgs) => {\r\n      return this.http.delete(urlRes, optionsRes);\r\n    });\r\n  }\n/**\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npatch(url: string, body: any, options?: RequestOptionsArgs): Observable<any> {\r\n    return this.getPostData(url, body, options, (urlRes: string) => {\r\n      return this.http.patch(urlRes, body, options);\r\n    });\r\n  }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nhead(url: string, options?: RequestOptionsArgs): Observable<any> {\r\n    return this.getData(url, options, (urlRes: string, optionsRes: RequestOptionsArgs) => {\r\n      return this.http.head(urlRes, optionsRes);\r\n    });\r\n  }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\noptions(url: string, options?: RequestOptionsArgs): Observable<any> {\r\n    return this.getData(url, options, (urlRes: string, optionsRes: RequestOptionsArgs) => {\r\n      return this.http.options(urlRes, optionsRes);\r\n    });\r\n  }\n/**\n * @param {?} uri\n * @param {?} options\n * @param {?} callback\n * @return {?}\n */\nprivate getData(uri: string | Request, options: RequestOptionsArgs,\r\n                  callback: (uri: string | Request, options?: RequestOptionsArgs) => Observable<Response>): any {\r\n\r\n    let /** @type {?} */ url = uri;\r\n\r\n    if (typeof uri !== 'string')\r\n      url = uri.url;\r\n\r\n    const /** @type {?} */ key = url + JSON.stringify(options);\r\n\r\n    try {\r\n      return this.resolveData(key);\r\n\r\n    } catch ( /** @type {?} */e) {\r\n      return callback(uri, options)\r\n        .map(res => res.json())\r\n        .do(data => {\r\n          this.setCache(key, data);\r\n        });\r\n    }\r\n  }\n/**\n * @param {?} uri\n * @param {?} body\n * @param {?} options\n * @param {?} callback\n * @return {?}\n */\nprivate getPostData(uri: string | Request, body: any, options: RequestOptionsArgs,\r\n                      callback: (uri: string | Request, body: any, options?: RequestOptionsArgs) => Observable<Response>): any {\r\n\r\n    let /** @type {?} */ url = uri;\r\n\r\n    if (typeof uri !== 'string')\r\n      url = uri.url;\r\n\r\n    const /** @type {?} */ key = url + JSON.stringify(body) + JSON.stringify(options);\r\n\r\n    try {\r\n      return this.resolveData(key);\r\n    } catch ( /** @type {?} */e) {\r\n      return callback(uri, body, options)\r\n        .map(res => res.json())\r\n        .do(data => {\r\n          this.setCache(key, data);\r\n        });\r\n    }\r\n  }\n/**\n * @param {?} key\n * @return {?}\n */\nprivate resolveData(key: string): any {\r\n    const /** @type {?} */ data = this.getFromCache(key);\r\n\r\n    if (!data)\r\n      throw new Error();\r\n\r\n    return Observable.fromPromise(Promise.resolve(data));\r\n  }\n/**\n * @param {?} key\n * @param {?} data\n * @return {?}\n */\nprivate setCache(key: string, data: any): any {\r\n    return this.stateTransfer.set(key, data);\r\n  }\n/**\n * @param {?} key\n * @return {?}\n */\nprivate getFromCache(key: string): any {\r\n    return this.stateTransfer.get(key);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: StateTransferService, },\n];\n}\n\nfunction HttpTransferService_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpTransferService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpTransferService.ctorParameters;\n/** @type {?} */\nHttpTransferService.prototype.http;\n/** @type {?} */\nHttpTransferService.prototype.stateTransfer;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","// angular\r\n\nimport { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\n\r\n// module\r\n\nimport { DEFAULT_STATE_ID, ServerStateTransferService, STATE_ID } from './src/server-state-transfer.service';\r\nimport { HttpTransferService } from './src/http-transfer.service';\r\nimport { StateTransferService } from './src/state-transfer.service';\r\nimport { jsonStringUnescape } from './src/utils/json-string-tools';\r\n\r\nexport {STATE_ID,DEFAULT_STATE_ID,ServerStateTransferService} from './src/server-state-transfer.service';\r\nexport {StateTransferService} from './src/state-transfer.service';\r\nexport {HttpTransferService} from './src/http-transfer.service';\n/**\n * @param {?} stateId\n * @return {?}\n */\nexport function stateTransferFactory(stateId: string): StateTransferService {\r\n  const /** @type {?} */ stateTransfer = new StateTransferService();\r\n  const /** @type {?} */ escapedState = window[stateId] || '';\r\n  const /** @type {?} */ state = JSON.parse(jsonStringUnescape(escapedState));\r\n\r\n  stateTransfer.initialize(state);\r\n\r\n  return stateTransfer;\r\n}\nexport class HttpTransferModule {\n/**\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: HttpTransferModule\r\n    };\r\n  }\n/**\n * @param {?} parentModule\n */\nconstructor(  parentModule: HttpTransferModule) {\r\n    if (parentModule)\r\n      throw new Error('HttpTransferModule already loaded; import in root module only.');\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  providers: [\r\n    HttpTransferService\r\n  ]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpTransferModule, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction HttpTransferModule_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpTransferModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpTransferModule.ctorParameters;\n}\n\nexport class BrowserStateTransferModule {\n/**\n * @param {?=} stateId\n * @return {?}\n */\nstatic forRoot(stateId: string = DEFAULT_STATE_ID): ModuleWithProviders {\r\n    return {\r\n      ngModule: BrowserStateTransferModule,\r\n      providers: [\r\n        {\r\n          provide: StateTransferService,\r\n          useFactory: (stateTransferFactory),\r\n          deps: [STATE_ID]\r\n        },\r\n        {\r\n          provide: STATE_ID,\r\n          useValue: stateId\r\n        }\r\n      ]\r\n    };\r\n  }\n/**\n * @param {?} parentModule\n */\nconstructor(  parentModule: BrowserStateTransferModule) {\r\n    if (parentModule)\r\n      throw new Error('BrowserStateTransferModule already loaded; import in BROWSER module only.');\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserStateTransferModule, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction BrowserStateTransferModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserStateTransferModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserStateTransferModule.ctorParameters;\n}\n\nexport class ServerStateTransferModule {\n/**\n * @param {?=} stateId\n * @return {?}\n */\nstatic forRoot(stateId: string = DEFAULT_STATE_ID): ModuleWithProviders {\r\n    return {\r\n      ngModule: ServerStateTransferModule,\r\n      providers: [\r\n        {\r\n          provide: STATE_ID,\r\n          useValue: stateId\r\n        }\r\n      ]\r\n    };\r\n  }\n/**\n * @param {?} parentModule\n */\nconstructor(  parentModule: ServerStateTransferModule) {\r\n    if (parentModule)\r\n      throw new Error('ServerStateTransferModule already loaded; import in SERVER module only.');\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  providers: [\r\n    {\r\n      provide: StateTransferService,\r\n      useClass: ServerStateTransferService\r\n    }\r\n  ]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ServerStateTransferModule, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction ServerStateTransferModule_tsickle_Closure_declarations() {\n/** @type {?} */\nServerStateTransferModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nServerStateTransferModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["tslib_1.__extends"],"mappings":";;;;;;;;;;AAGA;IAEA;QACI,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,EAAe,CAAC;KACrC;IAKH,yCADG,GACH,UADG,KAAA;QACH,iBAKG;QAJC,MAAM,CADC,IAAC,CAAI,KAAC,CAAK;aAEf,OADC,CAAO,UAAA,GAAC;YAER,KAAI,CADC,GAAC,CAAG,GAAC,EAAI,KAAA,CAAM,GAAC,CAAG,CAAC,CAAC;SAE3B,CADC,CAAC;KAEN;IAKH,kCAJG,GAIH,UAJG,GAAA;QAKC,OAJO,IAAA,CAAK,KAAC,CAAK,GAAC,CAAG,GAAC,CAAG,CAAC;KAK5B;IAMH,kCARG,GAQH,UARG,GAAA,EAAA,KAAA;QASC,OARO,IAAA,CAAK,KAAC,CAAK,GAAC,CAAG,GAAC,EAAI,KAAA,CAAM,CAAC;KASnC;IAIH,qCAVG,GAUH;KAEG;IARA,qCAAA,GAYH;QAAA,iBAQG;QAPC,IAZM,GAAA,GAAM,EAAA,CAAG;QAaf,KAAK,CAZC,IAAC,CAAI,IAAC,CAAI,KAAC,CAAK,IAAC,EAAI,CAAE;aAO/B,OANM,CAAO,UAAC,GAAK;YAab,GAAG,CAZC,GAAC,CAAG,GAAG,KAAA,CAAK,GAAC,CAAG,GAAC,CAAG,CAAC;SAa1B,CAZC,CAAC;QAcL,OAZO,GAAA,CAAI;KAaZ;IAXI,+BAAA,GAAoC;QAa3C,EAZE,IAAA,EAAM,UAAA,EAAW;KAalB,CAZC;IAED,mCAAA,GAAA,cAAA,OAAA,EAeA,GAAA,CAAC;IACF,2BAAC;CAxDD,IAwDC,AAED,AAUC;;ACvED,IAAM,mBAAA,GAAsB;IAC1B,GAAG,EAAE,OAAA;IACL,GAAG,EAAE,MAAA;IACL,GAAG,EAAE,MAAA;IACL,IAAI,EAAE,MAAA;IACN,IAAI,EAAE,OAAA;CACP,CAAC;AAEF,IAAM,qBAAA,GAAwB;IAC5B,MAAM,EAAE,GAAA;IACR,MAAM,EAAE,GAAA;IACR,OAAO,EAAE,GAAA;IACT,OAAO,EAAE,IAAA;CACV,CAAC;AAKF,0BAHC,GAAA;IAIC,OAHO,GAAA,CAAI,OAAC,CAAO,aAAC,EAAc,UAAA,CAAA,IAAK,OAAA,mBAAA,CAAoB,CAAC,CAAC,GAAA,CAAC,CAAC;CAIhE;AAKD,4BANC,GAAA;IAOC,OANO,GAAA,CAAI,OAAC,CAAO,gCAAC,EAAiC,UAAA,CAAA,IAAK,OAAA,qBAAA,CAAsB,CAAC,CAAC,GAAA,CAAC,CAAC;CAOrF;;ACjBM,IAAM,QAAA,GAAW,IAAI,cAAA,CAAsB,UAAE,CAAU,CAAC;AAI/D,AAHO,IAAM,gBAAA,GAAmB,OAAA,CAAQ;AAIxC;IADCA,8CAAA;IAOD,oCANgC,OAAS,EACV,aAAe,EACf,eAAiB;QAIhD,YAII,iBAAO,SACR;QAX6B,aAAA,GAAA,OAAA,CAAS;QACV,mBAAA,GAAA,aAAA,CAAe;QACf,qBAAA,GAAA,eAAA,CAAiB;;KAS7C;IAIH,2CATG,GASH;QACI,IATI;YAUF,IATM,UAAA,GAAgB,IAAA,CAAK,aAAC,CAAa,WAAC,EAAW,CAAE;YAUvD,IATM,KAAA,GAAQ,IAAA,CAAK,SAAC,CAAS,IAAC,CAAI,MAAC,EAAM,CAAE,CAAC;YAU5C,IATM,YAAA,GAAe,gBAAA,CAAiB,KAAC,CAAK,CAAC;YAU7C,IATM,QAAA,GAAW,IAAA,CAAK,eAAC,CAAe,cAAC,CAAc,UAAC,EAAS;gBAU7D,EAAE,EATE,IAAA;gBAUJ,aAAa,EATE,iBAAA,CAAkB,IAAC;gBAUlC,MAAM,EATE,EAAA;gBAUR,IAAI,EATE,EAAA;aAUP,CATC,CAAC;YAWH,IATM,IAAA,GAAO,UAAA,CAAS,IAAC,CAAI;YAW3B,IAAI,CATC,IAAC;gBAUJ,MATM,IAAI,KAAA,CAAM,kCAAC,CAAkC,CAAC;YAWtD,IATM,MAAA,GAAS,QAAA,CAAS,aAAC,CAAa,QAAC,CAAQ,CAAC;YAUhD,QAAQ,CATC,QAAC,CAAQ,MAAC,EAAO,aAAA,IAAY,CAAI,OAAC,cAAO,YAAS,MAAY,CAAG,CAAC;YAU3E,QAAQ,CATC,WAAC,CAAW,IAAC,EAAK,MAAA,CAAO,CAAC;SAUpC;QATC,OAAA,CAAQ,EAAE;YAUV,OAAO,CATC,KAAC,CAAK,CAAC,CAAC,CAAC;SAUlB;KACF;IARI,qCAAA,GAAoC;QAU3C,EATE,IAAA,EAAM,UAAA,EAAW;KAUlB,CATC;IAED,yCAAA,GAAA,cAAA,OAAA;QAYD,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,QAAQ,EAAG,EAAE,EAAG,EAAC;QACvE,EAAC,IAAI,EAAE,aAAa,GAAG;QACvB,EAAC,IAAI,EAAE,gBAAgB,GAAG;KACzB,GAAA,CAAC;IACF,iCAAC;CAlDD,CADC,oBAAA,GAmDA,AAED,AAcC;;AClED;IAKA,6BAL+B,IAAM,EACJ,aAAe;QADjB,SAAA,GAAA,IAAA,CAAM;QACJ,kBAAA,GAAA,aAAA,CAAe;KAM7C;IAMH,qCATG,GASH,UATG,GAAA,EAAA,OAAA;QASH,iBAIG;QAHC,OATO,IAAA,CAAK,OAAC,CAAO,GAAC,EAAI,OAAA,EAAS,UAAA,MAAS,EAAQ,UAAY;YAU7D,OATO,KAAA,CAAK,IAAC,CAAI,OAAC,CAAO,MAAC,EAAO,UAAA,CAAW,CAAC;SAU9C,CATC,CAAC;KAUJ;IAMH,iCAbG,GAaH,UAbG,GAAA,EAAA,OAAA;QAaH,iBAIG;QAHC,OAbO,IAAA,CAAK,OAAC,CAAO,GAAC,EAAI,OAAA,EAAS,UAAA,MAAS,EAAQ,UAAY;YAc7D,OAbO,KAAA,CAAK,IAAC,CAAI,GAAC,CAAG,MAAC,EAAO,UAAA,CAAW,CAAC;SAc1C,CAbC,CAAC;KAcJ;IAOH,kCAlBG,GAkBH,UAlBG,GAAA,EAAA,IAAA,EAAA,OAAA;QAkBH,iBAIG;QAHC,OAlBO,IAAA,CAAK,WAAC,CAAW,GAAC,EAAI,IAAA,EAAM,OAAA,EAAS,UAAA,MAAS;YAmBnD,OAlBO,KAAA,CAAK,IAAC,CAAI,IAAC,CAAI,MAAC,EAAO,IAAA,EAAM,OAAA,CAAQ,CAAC;SAmB9C,CAlBC,CAAC;KAmBJ;IAOH,iCAvBG,GAuBH,UAvBG,GAAA,EAAA,IAAA,EAAA,OAAA;QAuBH,iBAIG;QAHC,OAvBO,IAAA,CAAK,OAAC,CAAO,GAAC,EAAI,OAAA,EAAS,UAAA,MAAS,EAAQ,UAAY;YAwB7D,OAvBO,KAAA,CAAK,IAAC,CAAI,GAAC,CAAG,MAAC,EAAO,UAAA,CAAW,CAAC;SAwB1C,CAvBC,CAAC;KAwBJ;IAMH,oCA3BG,GA2BH,UA3BG,GAAA,EAAA,OAAA;QA2BH,iBAIG;QAHC,OA3BO,IAAA,CAAK,OAAC,CAAO,GAAC,EAAI,OAAA,EAAS,UAAA,MAAS,EAAQ,UAAY;YA4B7D,OA3BO,KAAA,CAAK,IAAC,CAAI,MAAC,CAAM,MAAC,EAAO,UAAA,CAAW,CAAC;SA4B7C,CA3BC,CAAC;KA4BJ;IAOH,mCAhCG,GAgCH,UAhCG,GAAA,EAAA,IAAA,EAAA,OAAA;QAgCH,iBAIG;QAHC,OAhCO,IAAA,CAAK,WAAC,CAAW,GAAC,EAAI,IAAA,EAAM,OAAA,EAAS,UAAA,MAAS;YAiCnD,OAhCO,KAAA,CAAK,IAAC,CAAI,KAAC,CAAK,MAAC,EAAO,IAAA,EAAM,OAAA,CAAQ,CAAC;SAiC/C,CAhCC,CAAC;KAiCJ;IAMH,kCApCG,GAoCH,UApCG,GAAA,EAAA,OAAA;QAoCH,iBAIG;QAHC,OApCO,IAAA,CAAK,OAAC,CAAO,GAAC,EAAI,OAAA,EAAS,UAAA,MAAS,EAAQ,UAAY;YAqC7D,OApCO,KAAA,CAAK,IAAC,CAAI,IAAC,CAAI,MAAC,EAAO,UAAA,CAAW,CAAC;SAqC3C,CApCC,CAAC;KAqCJ;IAMH,qCAxCG,GAwCH,UAxCG,GAAA,EAAA,OAAA;QAwCH,iBAIG;QAHC,OAxCO,IAAA,CAAK,OAAC,CAAO,GAAC,EAAI,OAAA,EAAS,UAAA,MAAS,EAAQ,UAAY;YAyC7D,OAxCO,KAAA,CAAK,IAAC,CAAI,OAAC,CAAO,MAAC,EAAO,UAAA,CAAW,CAAC;SAyC9C,CAxCC,CAAC;KAyCJ;IAtCA,qCAAA,GA6CH,UA7CG,GAAA,EAAA,OAAA,EA8Ce,QAAuF;QADzG,iBAoBG;QAjBC,IA7CI,GAAA,GAAM,GAAA,CAAI;QA+Cd,IAAI,OA7CO,GAAA,KAAQ,QAAA;YA8CjB,GAAG,GA7CG,GAAA,CAAI,GAAC,CAAG;QA+ChB,IA7CM,GAAA,GAAM,GAAA,GAAM,IAAA,CAAK,SAAC,CAAS,OAAC,CAAO,CAAC;QA+C1C,IA7CI;YA8CF,OA7CO,IAAA,CAAK,WAAC,CAAW,GAAC,CAAG,CAAC;SA+C9B;QA7CC,OAAA,CAAQ,EAAE;YA8CV,OA7CO,QAAA,CAAS,GAAC,EAAI,OAAA,CAAQ;iBA8C1B,GA7CC,CAAG,UAAA,GAAC,IAAM,OAAA,GAAA,CAAI,IAAC,EAAI,GAAA,CAAE;iBA8CtB,EA7CC,CAAE,UAAA,IAAC;gBA8CH,KAAI,CA7CC,QAAC,CAAQ,GAAC,EAAI,IAAA,CAAK,CAAC;aA8C1B,CA7CC,CAAC;SA8CN;KACF;IA3CA,yCAAA,GAmDH,UAnDG,GAAA,EAAA,IAAA,EAAA,OAAA,EAoDmB,QAAkG;QADxH,iBAmBG;QAhBC,IAnDI,GAAA,GAAM,GAAA,CAAI;QAqDd,IAAI,OAnDO,GAAA,KAAQ,QAAA;YAoDjB,GAAG,GAnDG,GAAA,CAAI,GAAC,CAAG;QAqDhB,IAnDM,GAAA,GAAM,GAAA,GAAM,IAAA,CAAK,SAAC,CAAS,IAAC,CAAI,GAAG,IAAA,CAAK,SAAC,CAAS,OAAC,CAAO,CAAC;QAqDjE,IAnDI;YAoDF,OAnDO,IAAA,CAAK,WAAC,CAAW,GAAC,CAAG,CAAC;SAoD9B;QAnDC,OAAA,CAAQ,EAAE;YAoDV,OAnDO,QAAA,CAAS,GAAC,EAAI,IAAA,EAAM,OAAA,CAAQ;iBAoDhC,GAnDC,CAAG,UAAA,GAAC,IAAM,OAAA,GAAA,CAAI,IAAC,EAAI,GAAA,CAAE;iBAoDtB,EAnDC,CAAE,UAAA,IAAC;gBAoDH,KAAI,CAnDC,QAAC,CAAQ,GAAC,EAAI,IAAA,CAAK,CAAC;aAoD1B,CAnDC,CAAC;SAoDN;KACF;IAjDA,yCAAA,GAsDH,UAtDG,GAAA;QAuDC,IAtDM,IAAA,GAAO,IAAA,CAAK,YAAC,CAAY,GAAC,CAAG,CAAC;QAwDpC,IAAI,CAtDC,IAAC;YAuDJ,MAtDM,IAAI,KAAA,EAAM,CAAE;QAwDpB,OAtDO,UAAA,CAAW,WAAC,CAAW,OAAC,CAAO,OAAC,CAAO,IAAC,CAAI,CAAC,CAAC;KAuDtD;IApDA,sCAAA,GA0DH,UA1DG,GAAA,EAAA,IAAA;QA2DC,OA1DO,IAAA,CAAK,aAAC,CAAa,GAAC,CAAG,GAAC,EAAI,IAAA,CAAK,CAAC;KA2D1C;IAxDA,0CAAA,GA6DH,UA7DG,GAAA;QA8DC,OA7DO,IAAA,CAAK,aAAC,CAAa,GAAC,CAAG,GAAC,CAAG,CAAC;KA8DpC;IA5DI,8BAAA,GAAoC;QA8D3C,EA7DE,IAAA,EAAM,UAAA,EAAW;KA8DlB,CA7DC;IAED,kCAAA,GAAA,cAAA,OAAA;QAgED,EAAC,IAAI,EAAE,IAAI,GAAG;QACd,EAAC,IAAI,EAAE,oBAAoB,GAAG;KAC7B,GAAA,CAAC;IACF,0BAAC;CAtLD,IAsLC,AAED,AAYC;;8BCrMA,OAAA;IAKC,IAJM,aAAA,GAAgB,IAAI,oBAAA,EAAqB,CAAE;IAKjD,IAJM,YAAA,GAAe,MAAA,CAAO,OAAC,CAAO,IAAI,EAAA,CAAG;IAK3C,IAJM,KAAA,GAAQ,IAAA,CAAK,KAAC,CAAK,kBAAC,CAAkB,YAAC,CAAY,CAAC,CAAC;IAM3D,aAAa,CAJC,UAAC,CAAU,KAAC,CAAK,CAAC;IAMhC,OAJO,aAAA,CAAc;CAKtB;AACD;IAYA,4BAPe,YAAe;QAQ1B,IAAI,YAAY;YACd,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;KACrF;IAhBA,0BAAA,GAKH;QACI,OALO;YAML,QAAQ,EALE,kBAAA;SAMX,CALC;KAMH;IACI,6BAAA,GAAoC;QAQ3C,EAPE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;oBAQtB,SAAS,EAPE;wBAQT,mBAAmB;qBACpB;iBACF,EAPC,EAAG;KAQJ,CAPC;IAED,iCAAA,GAAA,cAAA,OAAA;QAUD,EAAC,IAAI,EAAE,kBAAkB,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAG,EAAC;KACjF,GAAA,CAAC;IACF,yBAAC;CA7BD,IA6BC;AAED,AAUA;IAwBA,oCAxBe,YAAe;QAyB1B,IAAI,YAAY;YACd,MAAM,IAAI,KAAK,CAAC,2EAA2E,CAAC,CAAC;KAChG;IA5CA,kCAAA,GAsBH,UAtBG,OAAA;QAAA,wBAAA,EAAA,0BAAA;QAuBC,OAtBO;YAuBL,QAAQ,EAtBE,0BAAA;YAuBV,SAAS,EAtBE;gBAuBT;oBACE,OAAO,EAtBE,oBAAA;oBAuBT,UAAU,GAtBE,oBAAE,CAAoB;oBAuBlC,IAAI,EAtBE,CAAA,QAAE,CAAQ;iBAuBjB;gBACD;oBACE,OAAO,EAtBE,QAAA;oBAuBT,QAAQ,EAtBE,OAAA;iBAuBX;aACF;SACF,CAtBC;KAuBH;IAhBI,qCAAA,GAAoC;QAyB3C,EAxBE,IAAA,EAAM,QAAA,EAAS;KAyBhB,CAxBC;IAED,yCAAA,GAAA,cAAA,OAAA;QA2BD,EAAC,IAAI,EAAE,0BAA0B,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAG,EAAC;KACzF,GAAA,CAAC;IACF,iCAAC;CArCD,IAqCC;AAED,AAUA;IAmBA,mCAzCe,YAAe;QA0C1B,IAAI,YAAY;YACd,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;KAC9F;IAxDA,iCAAA,GAuCH,UAvCG,OAAA;QAAA,wBAAA,EAAA,0BAAA;QAwCC,OAvCO;YAwCL,QAAQ,EAvCE,yBAAA;YAwCV,SAAS,EAvCE;gBAwCT;oBACE,OAAO,EAvCE,QAAA;oBAwCT,QAAQ,EAvCE,OAAA;iBAwCX;aACF;SACF,CAvCC;KAwCH;IAjCI,oCAAA,GAAoC;QA0C3C,EAzCE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;oBA0CtB,SAAS,EAzCE;wBA0CT;4BACE,OAAO,EAzCE,oBAAA;4BA0CT,QAAQ,EAzCE,0BAAA;yBA0CX;qBACF;iBACF,EAzCC,EAAG;KA0CJ,CAzCC;IAED,wCAAA,GAAA,cAAA,OAAA;QA4CD,EAAC,IAAI,EAAE,yBAAyB,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAG,EAAC;KACxF,GAAA,CAAC;IACF,gCAAC;CAvCD,IAuCC,AAED,AAQC;;"}